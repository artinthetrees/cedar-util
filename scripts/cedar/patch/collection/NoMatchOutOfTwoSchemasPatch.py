import jsonpatch
import re
import dpath
from cedar.patch import utils


class NoMatchOutOfTwoSchemasPatch(object):

    def __init__(self):
        self.description = "Fix the potential errors that trigger schema match error between 2 options: template field or template element"
        self.from_version = None
        self.to_version = "1.1.0"
        self.path = None

    def is_applied(self, error, doc=None):
        utils.check_argument('error', error, isreq=True)
        utils.check_argument('doc', doc, isreq=False)

        error_description = error
        pattern = re.compile("instance failed to match exactly one schema \(matched 0 out of 2\) at ((/properties/[^/]+/items)?(/properties/[^/]+)?)*/properties/[^/]+/items$")
        if pattern.match(error_description):
            self.path = utils.get_error_location(error_description)
            return True
        else:
            return False

    def apply(self, doc, path=None):
        patch = self.get_json_patch(doc, path)
        patched_doc = jsonpatch.JsonPatch(patch).apply(doc)
        return patched_doc

    @staticmethod
    def get_patch(doc, error):
        utils.check_argument_not_none("doc", doc)
        error_description = error
        path = utils.get_error_location(error_description)

        patches = []
        patch = {
            "op": "replace",
            "value": {
                "xsd": "http://www.w3.org/2001/XMLSchema#",
                "pav": "http://purl.org/pav/",
                "oslc": "http://open-services.net/ns/core#",
                "schema": "http://schema.org/",
                "pav:createdOn": {
                    "@type": "xsd:dateTime"
                },
                "pav:createdBy": {
                    "@type": "@id"
                },
                "pav:lastUpdatedOn": {
                    "@type": "xsd:dateTime"
                },
                "oslc:modifiedBy": {
                    "@type": "@id"
                }
            },
            "path": path + "/@context"
        }
        patches.append(patch)

        user_property_object = dpath.util.get(doc, path)
        title = user_property_object.get("title") or ""
        if not title:  # if title is empty
            patch = {
                "op": "add",
                "value": "blank",
                "path": path + "/title"
            }
            patches.append(patch)

        description = user_property_object.get("description") or ""
        if not description:
            patch = {
                "op": "add",
                "value": "blank",
                "path": path + "/description"
            }
            patches.append(patch)

        created_on = user_property_object.get("pav:createdOn") or ""
        if not created_on:
            patch = {
                "op": "add",
                "value": None,
                "path": path + "/pav:createdOn"
            }
            patches.append(patch)

        created_by = user_property_object.get("pav:createdBy") or ""
        if not created_by:
            patch = {
                "op": "add",
                "value": None,
                "path": path + "/pav:createdBy"
            }
            patches.append(patch)

        last_updated_on = user_property_object.get("pav:lastUpdatedOn") or ""
        if not last_updated_on:
            patch = {
                "op": "add",
                "value": None,
                "path": path + "/pav:lastUpdatedOn"
            }
            patches.append(patch)

        modified_by = user_property_object.get("oslc:modifiedBy") or ""
        if not modified_by:
            patch = {
                "op": "add",
                "value": None,
                "path": path + "/oslc:modifiedBy"
            }
            patches.append(patch)

        schema_version = user_property_object.get("schema:schemaVersion") or ""
        if not schema_version:
            patch = {
                "op": "add",
                "value": "1.1.0",
                "path": path + "/schema:schemaVersion"
            }
            patches.append(patch)

        if utils.is_template_field(user_property_object):
            ui_object = user_property_object.get("_ui")
            ui_title = ui_object.get("title") or ""
            if not ui_title:
                patch = {
                    "op": "add",
                    "value": "Title is auto-generated by CEDAR Patch",
                    "path": path + "/_ui/title"
                }
                patches.append(patch)
            ui_description = ui_object.get("description") or ""
            if not ui_description:
                patch = {
                    "op": "add",
                    "value": "Description is auto-generated by CEDAR Patch",
                    "path": path + "/_ui/description"
                }
                patches.append(patch)
            input_type = ui_object.get("inputType") or ""
            if not input_type:
                patch = {
                    "op": "add",
                    "value": "textfield",
                    "path": path + "/_ui/inputType"
                }
                patches.append(patch)
        elif utils.is_template_element(user_property_object):
            ui_object = user_property_object.get("_ui")
            ui_title = ui_object.get("title") or ""
            if not ui_title:
                patch = {
                    "op": "add",
                    "value": "Title is auto-generated by CEDAR Patch",
                    "path": path + "/_ui/title"
                }
                patches.append(patch)
            ui_description = ui_object.get("description") or ""
            if not ui_description:
                patch = {
                    "op": "add",
                    "value": "Description is auto-generated by CEDAR Patch",
                    "path": path + "/_ui/description"
                }
                patches.append(patch)
            ui_order = ui_object.get("order") or ""
            if not ui_order:
                patch = {
                    "op": "add",
                    "value": [],
                    "path": path + "/_ui/order"
                }
                patches.append(patch)
            ui_property_labels = ui_object.get("propertyLabels") or ""
            if not ui_property_labels:
                patch = {
                    "op": "add",
                    "value": {},
                    "path": path + "/_ui/propertyLabels"
                }
                patches.append(patch)

        return jsonpatch.JsonPatch(patches)
